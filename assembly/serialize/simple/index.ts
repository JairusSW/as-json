// import { JSON } from "../..";
import { bs } from "../../custom/bs";
import { serializeArray } from "./array";
import { serializeBool } from "./bool";
import { serializeDate } from "./date";
import { serializeFloat } from "./float";
import { serializeInteger } from "./integer";
import { serializeMap } from "./map";
import { serializeObject } from "./object";
import { serializeString } from "./string";

// @ts-ignore: Decorator valid here
@inline export function serialize_simple<T>(src: T, staticSize: bool = false): void {
    if (isBoolean<T>()) {
        serializeBool(src as bool, staticSize);
    } else if (isInteger<T>()) {
        // @ts-ignore
        serializeInteger<T>(src, staticSize);
    } else if (isFloat<T>(src)) {
        // @ts-ignore
        serializeFloat<T>(src, staticSize);
        // @ts-ignore: Function is generated by transform
    } else if (changetype<usize>(src) == <usize>0) {
        if (!staticSize) bs.ensureSize(8);
        store<u64>(bs.offset, 30399761348886638);
        bs.offset += 8;
    } else if (isString<nonnull<T>>()) {
        serializeString(src as string, staticSize);
        // @ts-ignore: Supplied by transform
    } else if (isDefined(src.__SERIALIZE_BS)) {
        // @ts-ignore
        serializeObject(changetype<nonnull<T>>(src), staticSize);
    } else if (src instanceof Date) {
        // @ts-ignore
        serializeDate(changetype<nonnull<T>>(src), staticSize);
    } else if (src instanceof Array) {
        // @ts-ignore
        serializeArray(changetype<nonnull<T>>(src), staticSize);
    } else if (src instanceof Map) {
        // @ts-ignore
        serializeMap(changetype<nonnull<T>>(src), staticSize);
    } /*else if (src instanceof JSON.Value) {
        serializeArbitrary(src);
    }*/ else {
        ERROR(`Could not serialize src of type ${nameof<T>()}. Make sure to add the correct decorators to classes.`);
    }
}